---
#
# Initial setup
#

- name: Load a variable file based on the OS type
  ansible.builtin.include_vars:
    file: '{{ ansible_os_family | lower }}.yaml'
  tags:
    - upgrade

- name: Pull dotfiles from github if no local modifications
  ansible.builtin.git:
    repo: git@github.com:jpmorris/dotfiles.git
    dest: /home/jmorris/dotfiles
    version: master
  tags:
    - upgrade

- name: Update apt repo and cache on all Debian/Ubuntu boxes
  when: ansible_os_family == 'Debian'
  become: true
  become_user: root
  ansible.builtin.apt:
    upgrade: true 
    update_cache: true
    force_apt_get: true
    cache_valid_time: 3600
  tags:
    - upgrade

- name: Update pcaman repo and cache on all Arch boxes
  when: ansible_os_family == 'Archlinux'
  become: true
  become_user: root
  community.general.pacman:
    update_cache: true
  tags:
    - upgrade

- name: Create the `aur_builder` user
  become: true
  become_user: root
  when: ansible_os_family == 'Archlinux'
  ansible.builtin.user:
    name: aur_builder
    create_home: true
    group: wheel
  tags:
    - upgrade

- name: Allow the `aur_builder` user to run `sudo pacman` without a password
  become: true
  become_user: root
  when: ansible_os_family == 'Archlinux'
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/11-install-aur_builder
    line: 'aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman'
    create: true
    mode: "0644"
    validate: 'visudo -cf %s'
  tags:
    - upgrade


- name: Upgrade the system using yay, AUR and repo packages.
  become: true
  become_user: aur_builder
  when: 
    - ansible_os_family == 'Archlinux' 
    - inventory_hostname not in hosts_deny
  kewlfft.aur.aur:
    update_cache: true
    upgrade: true
    state: latest
    aur_only: false
  tags:
    - upgrade


#
# COMMON PACKAGES
#
- name: Install common packages
  ansible.builtin.package:
    name:
      - "{{ linux_neofetch }}"
      - "{{ linux_cal }}"

#
# BASH
#
- name: Bash symbolic link
  ansible.builtin.file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: jmorris
    group: jmorris
    state: link
  with_items:
    # need this as global variable
    - { src: '{{ ansible_config_home }}/roles/linux/files/home/bashrc', dest: $HOME/.bashrc }
    - { src: '{{ ansible_config_home }}/roles/linux/files/home/extend.bashrc', dest: $HOME/.extend.bashrc }

#
# ZSH
#

- name: Install zsh shell
  ansible.builtin.package:
    name:
      - '{{ linux_zsh }}'

- name: Check if .oh-my-zsh dir exists
  ansible.builtin.stat:
    path: $HOME/.oh-my-zsh
  register: omz_dir

- name: Install oh-my-zsh
  ansible.builtin.shell:
    cmd: 'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"'
    executable: "/usr/bin/sh"
    register: my_output
  when: not omz_dir.stat.exists
  changed_when: my_output.rc != 0

- name: Change oh-my-zsh permissions
  ansible.builtin.file:
    path: $HOME/.oh-my-zsh/cache/completions
    mode: '0755'

- name: Copy custom theme oh-my-zsh
  ansible.builtin.file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: jmorris
    group: jmorris
    state: link
    force: true
  with_items:
    - { src: '{{ ansible_config_home }}/roles/linux/files/home/oh-my-zsh/themes/blinks.zsh-theme', dest: $HOME/.oh-my-zsh/themes/blinks.zsh-theme }

- name: Change shell
  become: true
  ansible.builtin.user:
    name: jmorris
    shell: /bin/zsh

- name: Create link to zshrc
  ansible.builtin.file:
    src: '{{ ansible_config_home }}/roles/linux/files/home/zshrc'
    dest: $HOME/.zshrc
    owner: jmorris
    group: jmorris
    state: link
    force: true

- name: Create .zsh dir
  ansible.builtin.file:
    path: $HOME/.zsh/
    state: directory
    owner: jmorris
    group: jmorris
    mode: '0755'

    # this was only for zsh hostname colors
    # now using oh-my-zsh
    #- name: Create link to zshrc.extras
    #  ansible.builtin.file:
    #    src: '{{ ansible_config_home }}/roles/linux/files/home/zshrc.extras.{{ inventory_hostname }}'
    #    dest: $HOME/.zsh/zshrc.extras
    #    owner: jmorris
    #    group: jmorris
    #    state: link

- name: Check for local aliases file
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ role_path }}/files/home/aliases"
  register: aliases

- name: Link aliases file
  ansible.builtin.file:
    src: "{{ role_path }}/files/home/aliases"
    dest: $HOME/.aliases
    owner: jmorris
    group: jmorris
    state: link
  when: aliases.stat.exists

#
# (N)VIM
#

    # currently we get  latest vim via appimage and copy into /usr/bin, so do not install
    # at os level
    #- name: Install (neo)vim
    #  become: true
    #  become_user: root
    #  ansible.builtin.package:
    #    name:
    #      - '{{ linux_vim }}'
    #      - '{{ linux_neovim }}'

- name: Create symbolic link vim files
  ansible.builtin.file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: jmorris
    group: jmorris
    state: link
  with_items:
    - { src: '{{ ansible_config_home }}/roles/linux/files/home/vim/', dest: $HOME/.vim }
    - { src: '{{ ansible_config_home }}/roles/linux/files/home/vimrc', dest: $HOME/.vimrc }

- name: Crate symbolic link vim filesvim files (root)
  become: true
  become_user: root
  ansible.builtin.file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: jmorris
    group: jmorris
    state: link
    follow: false
  with_items:
    - { src: '{{ ansible_config_home }}/roles/linux/files/home/vim/', dest: /root/.vim }
    - { src: '{{ ansible_config_home }}/roles/linux/files/home/vimrc', dest: /root/.vimrc }

- name: Symbolic link neovim (root)
  become: true
  become_user: root
  ansible.builtin.file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: jmorris
    group: jmorris
    state: link
    follow: false
  with_items:
    - { src: '{{ ansible_config_home }}/roles/linux/files/home/config/nvim', dest: /root/.config/nvim}

- name: Symbolic link neovim
  become: true
  ansible.builtin.file:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: jmorris
    group: jmorris
    state: link
  with_items:
    - { src: '{{ ansible_config_home }}/roles/linux/files/home/config/nvim', dest: $HOME/.config/nvim}


- name: Create vim tempdirs
  ansible.builtin.file:
    path: '{{ item.path }}'
    state: directory
    mode: '0755'
  with_items:
    - { path: $HOME/.vimtmp/backup }
    - { path: $HOME/.vimtmp/swap }
    - { path: $HOME/.vimtmp/undo }

- name: Create vim tempdirs (root)
  become: true
  become_user: root
  ansible.builtin.file:
    path: '{{ item.path }}'
    state: directory
    mode: '0755'
  with_items:
    - { path: /root/.vimtmp/backup }
    - { path: /root/.vimtmp/swap }
    - { path: /root/.vimtmp/undo }

- name: Check if plugin dir exists
  ansible.builtin.find:
    path: $HOME/.vim/plugged
  register: last_plugin_dir

- name: Check if plugin dir exists (root)
  become: true
  become_user: root
  ansible.builtin.find:
    path: /root/.vim/plugged
  register: last_plugin_dir_root

- name: Install vim plugins
  ansible.builtin.command:
    cmd: 'nvim -c "PlugInstall" -c ":qa!"'
  register: nvim_plug_output
  when: last_plugin_dir.examined < 10
  changed_when: nvim_plug_output.rc != 0

- name: Install vim plugins (root)
  become: true
  become_user: root
  ansible.builtin.command:
    cmd: 'nvim -c "PlugInstall" -c ":qa!"'
  register: nvim_plug_output
  when: last_plugin_dir.examined < 10
  changed_when: nvim_plug_output.rc != 0
