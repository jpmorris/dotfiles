" This file has marker code folds:
" zo - open a code fold
" zc - close a fold
" zr - open all folds
" zm - close all folds

" FOR NEW INSTALL
" 1. Run Plug Install
" 2. go into python mode and run
" git clone --recursive https://github.com/python-mode/python-mode

" keybind ref:
" http://vimdoc.sourceforge.net/htmldoc/vimindex.html

" IMPORTAN KEYBINDS
" meta-(shift)-p            " Cycle through yanks
" :Yanks                    " Show yanks
" C-m                       " Comment current text or seletion
" :Autoformat               " format file
" C-n                       " add space around char
" zf                        " create fold
" zc                        " close fold
" zo                        " open fold
" gf                        " edit file under cursor
" S-j                       " join line below
" C-e                       " move viewport up
" C-y                       " move viewport down
" i C-X <>                  " complete commands in insert mode
" C-G                       " display current file name and position
" ''                        " cursor to the first CHAR of line before the last jump

" OTHER IDE CHANGES
" C-m                       " comment block
" C-i                       " easymotion
" S->                       " indent


call plug#begin()

" ENCODING                          {{{
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif
" }}}
" PRELIMS                           {{{
set nocompatible        " disable vi compatability; allow exclusive-vim features
syntax on               " syntax highlighting
filetype plugin on      " load filetype plugins for the filetype
filetype indent on      " load indent rules for the filetype
" }}}
" VARIABLES                         {{{
let g:is_gui     = has('gui_running')
let g:is_mac     = has('mac') || has('macunix') || has('gui_macvim')
let g:is_nix     = has('unix') && !has('macunix') && !has("win32unix")
let g:is_macvim  = g:is_mac && g:is_gui && has('gui_macvim')
let g:is_ubuntu  = g:is_nix && system("uname -a") =~ "Ubuntu"
let g:is_windows = has('win16') || has('win32') || has('win64')

" define what kind of VIM UI we are working with?
if g:is_macvim                | let g:ui_type = "MVIM"
elseif g:is_gui               | let g:ui_type = "GUI"
elseif exists("$TMUX")        | let g:ui_type = "TMUX"
elseif exists("$COLORTERM")   | let g:ui_type = "CTERM"
elseif exists("$TERM")        | let g:ui_type = "TERM"
else | let g:ui_type = "????" | endif
"}}}
" BACKUP/RECOVER                    {{{
set backupdir=~/.vimtmp/backup//
set directory=~/.vimtmp/swap//
set undodir=~/.vimtmp/undo//
Plug 'chrisbra/Recover.vim'
" }}}
" BELLS                             {{{
set noerrorbells                        " don't beep
set visualbell t_vb=                    " don't beep, remove visual bell char
" }}}
" CLIPBOARD                         {{{
if g:is_nix && has('unnamedplus')
  set clipboard=unnamedplus,unnamed
else
  set clipboard+=unnamed
endif
"  store and cycle through previous clipboard entries
Plug 'maxbrunsfeld/vim-yankstack'
" }}}
" CODE COMPLETION                   {{{
set completeopt+=menu,longest           " select first item, follow typing in autocomplete
set complete=.,w,b,u,t                  " do lots of scanning on tab completion,  FIXME?
set pumheight=6                         " Keep a small completion window
set completeopt+=preview
" Deoplete
"Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"Plug 'davidhalter/jedi'
"Plug 'davidhalter/jedi-vim'
Plug 'zchee/deoplete-jedi'
" }}}
" CODE DOCUMENTATION                {{{
" }}}
" CODE FORMATTING                   {{{
Plug 'Chiel92/vim-autoformat'
Plug 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_python_checkers = ['pylint']
let g:syntastic_r_checkers = ['lintr']
let g:syntastic_enable_r_lintr_checker = 1

" }}}
" CSV                               {{{
Plug 'chrisbra/csv.vim'
" }}}
" CURSOR                            {{{
set cursorline                          " highlight cursor line
set nocursorcolumn                      " do not highlight cursor column
" restore cursor position on opening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif
" }}}
" EASYMOTION                        {{{
Plug 'easymotion/vim-easymotion'
map <C-i> <Leader><Leader>s
" }}}
" EDGE SCROLLING                    {{{
set scrolloff=7                         " keep lines off edges of the screen when scrolling
set sidescroll=1                        " brings characters in view when side scrolling
set sidescrolloff=15                    " start side-scrolling when n chars are left
" set scrolljump=5                      " lines to scroll when cursor leaves screen
" }}}
" ENCODING                          {{{
scriptencoding utf-8
set encoding=utf-8 nobomb               " BOM often causes trouble
set termencoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
" }}}
" GIT                               {{{
" display git diff for current buffer in gutter
Plug 'airblade/vim-gitgutter'
let g:gitgutter_enabled = 1             " enable gitgutter by default
let g:gitgutter_signs = 0               " but do not display signs by default
let g:gitgutter_diff_args = '-w'        " ignore whitespace
let g:gitgutter_escape_grep = 1         " use the raw grep command
let g:gitgutter_realtime = 0            " let vim be snappier - don't lag.
let g:gitgutter_eager = 0               " do not lag
let g:gitgutter_map_keys = 0            " we will remap mappings
" }}}
" INPUT/COMMENTING                  {{{
Plug 'kana/vim-smartinput'              " add/remove punctuation pairs when typing
"Alternative commenter
"Plug 'tpope/vim-commentary'             " add/remove comments for various langs
Plug 'scrooloose/nerdcommenter'
let g:NERDCreateDefaultMappings = 0
nmap <C-m> <Plug>NERDCommenterToggle
vmap <C-m> <Plug>NERDCommenterTogglegv
Plug 'tpope/vim-surround'
nmap <C-n> ysl<space><space>
" }}}
" LOCAITON MARKS                    {{{
Plug 'kshenoy/vim-signature'
" }}}
" MARKDOWN                          {{{
Plug 'tpope/vim-markdown'
Plug 'timcharper/textile.vim'
Plug 'jtratner/vim-flavored-markdown'           " Github flavored markdown
" }}}
" MISC                              {{{
set showmatch                           " blink matching parenthesis
set matchtime=2
set number relativenumber               " hyprid line numbers
set numberwidth=4                       " max 4 gutter columns
set backspace=indent,eol,start          " backspace over breaks
"set fileformats="unix,dos,mac"          " try eol formats when reading
set list                                " show invisible characters like spaces
set foldmethod=manual                   " Folding Stuffs
" }}}
" MOUSE                             {{{
if has('mouse')
  set mouse=a
  set mousehide                         " hide mouse pointer when typing
endif
" }}}
" MOVEMENT                          {{{
noremap <C-j> <C-d>
noremap <C-k> <C-u>
inoremap jj <Esc>
inoremap JJ <Esc>
noremap j gj|                           " override j for long wrapped lines
noremap k gk|                           " override k for long wrapped lines
nmap <leader>b= ggVG=''                 " auto-indent the current buffer
vnoremap < <gv                          " indenting text in visual mode does not leave the mode
vnoremap > >gv                          " indenting text in visual mode does not leave the mode
nnoremap <Space> za                     " toggle fold on the current fold using <SPACE> key
vnoremap <Space> za                     " toggle fold on the current fold using <SPACE> key
" }}}
" NERDTREE                          {{{
Plug 'scrooloose/nerdtree'
" }}}
 "PYTHON                            {{{
Plug 'python-mode/python-mode', {'branch': 'develop'}
let g:pymode_python = 'python3'
if g:is_nix
  let g:python3_host_prog = '/opt/anaconda3/envs/vimpython3/bin/python'
  let g:python_host_prog = '/opt/anaconda3/envs/vimpython2/bin/python'
endif
Plug 'jpalardy/vim-slime'
let g:slime_target = "tmux"
vmap <leader>ss <Plug>SlimeRegionSend
nmap <leader>l <Plug>SlimeLineSend
" }}}
" R                                 {{{
if has("nvim")
    Plug 'roxma/nvim-completion-manager'
endif
Plug 'jalvesaq/Nvim-R'
let R_assign = 0
Plug 'gaalcaras/ncm-R'
Plug 'sirver/UltiSnips'
Plug 'lervag/vimtex'
" }}}
" READ/WRITE                        {{{
set autoread                            " watch for file changes
set noautochdir                         " do not auto change the working directory
set noautowrite                         " do not auto write file when moving away from it
set nofsync                             " allows OS to decide when to flush to disk
" }}}
" SPELL                             {{{
if version >= 700                       " Use english for spellchecking, but
   set spl=en spell
   nnoremap zG 2zg
endif
" }}}
" SEARCH/REPLACE                    {{{
set ignorecase                          " makes searches ignore case
set smartcase                           " if pattern has uppercase, be case-sensitive
set magic                               " use magic mode when searching/replacing
set incsearch                           " show search matches as you type
set hlsearch                            " highlight search terms
Plug 'nelstrom/vim-visual-star-search'  " search under cursor using * or #
nmap <leader>fr :%s#\<<C-r>=expand("<cword>")<CR>\>#    " replace word under cursor
set iskeyword-=.                        " do not break on keyword .
set iskeyword-=#                        " do not break on keyword -
set iskeyword-=-                        " do not break on kwyword #
" }}}
" STARTUP SCREEN                    {{{
" provides a beautiful startup screen for VIM
Plug 'mhinz/vim-startify'
let g:dotfiles_dir = '~/commonDrive/dotfiles'
let g:startify_bookmarks = [ '~/.vimrc', '~/.zshrc', '~/.zshenv', g:dotfiles_dir ]
" display upto 10 recent files on Startup screen
let g:startify_files_number = 7
" enable 'empty buffer', and 'quit' commands in Startup screen
let g:startify_enable_special = 0
" }}}
" STATUS LINE                       {{{
" define whether to enable tabline? (default: true)
let g:enable_tabline = 1
set cmdheight=2                 " use a status bar that is 2 rows high
set laststatus=2                " tell VIM to always put a status line in
set noshowmode
" provides a beautiful status line for VIM via Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_inactive_collapse = 1
let g:airline_section_y = "%{airline#util#wrap(airline#parts#ffenc() . ' ' . g:ui_type, 0)}"
" enable powerline symbols in status line
let g:airline_powerline_fonts = 1
" set a default status line theme
if !exists('g:airline_theme') | let g:airline_theme = 'molokai' | endif
if !is_gui | let g:airline_theme = 'dark' | endif
" show ruler and other relevant information in statusline
if has('cmdline_info')
  set ruler                     " Show the ruler
  set showcmd                   " show (partial) command in the last line of the screen
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
endif
" }}}
" TABS                              {{{
set tabstop=4                           " a tab is two spaces
set softtabstop=4                       " when <BS>, pretend tab is removed, even if spaces
set expandtab                           " expand tabs, by default
set nojoinspaces                        " prevents two spaces after punctuation on join

set autoindent                          " always set autoindenting on
set shiftwidth=2                        " number of spaces to use for autoindenting
set copyindent                          " copy the previous indentation on autoindenting
set shiftround                          " use multiple of 'sw' when indenting with '<' and '>'
set smarttab                            " insert tabs on start of line acc to 'sw' not 'ts'
" }}}
" TEXTWIDTH/LINEBREAKS              {{{
set nowrap                              " don't wrap lines
set linebreak                           " break long lines at words, when wrap is on
set whichwrap=b,s,h,l,<,>,[,]           " allow <BS> & cursor keys to move to prev/next line
set showbreak=↪                         " string to put at the starting of wrapped lines
set textwidth=97                        " 80 is too small
" }}}
" UNDO                              {{{
" undo and repeat
if has('persistent_undo')
  set undofile                  " have a long persisting undo data
  set undolevels=1000           " Maximum number of changes that can be undone
  set undoreload=10000          " Maximum number lines to save for undo on a buffer reload
  "set undodir=~/.vim/tmp/undo,/tmp
endif
" undo tree
Plug 'sjl/gundo.vim'
nnoremap <leader>tgu :GundoToggle<CR>
" }}}
" WHITESPACE                        {{{
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
" }}}


Plug 'tomasr/molokai'
call plug#end()

" COLORS/THEME                      {{{
" terminal colors
if &t_Co > 2 && &t_Co < 16
  set t_Co =16
elseif &t_Co > 16
  set t_Co =256
endif

" specify colors for startup screen
hi! default link StartifyBracket LineNr
hi! default link StartifyFile    Keyword
hi! default link StartifyFooter  String
hi! default link StartifyHeader  String
hi! default link StartifyNumber  Function
hi! default link StartifyPath    LineNr
hi! default link StartifySection Special
hi! default link StartifySelect  LineNr
hi! default link StartifySlash   LineNr
hi! default link StartifySpecial Special

"Plug 'altercation/vim-colors-solarized'
colorscheme molokai
highlight ColorColumn ctermbg=235 guibg=#2c2d27
let &colorcolumn="97,".join(range(120,200),",")
set background=dark
let g:impact_transbg=1
"colorscheme murphy
hi clear SpellBad
hi SpellBad cterm=underline
"hi IndentGuidesOdd  ctermbg=black
"hi IndentGuidesEven ctermbg=darkgrey
" }}}


" vim: ft=vim fdm=marker
